'use strict';
var debug = require('debug')('do:app');
var ware = require('ware');
var mixin = require('merge-descriptors');
var routeFactory = require('lib/app/route');

var proto = {

  /**
   * Mounts the middleware function(s) at the path. If path is not specified, it defaults to “/”.
   * @param  {string} path [description]
   * @return {[type]}         [description]
   */
  use: function(path) {
    var noPath = ('string' !== typeof path);
    var argumentsOffset = noPath ? 0 : 1;
    var handlers = Array.prototype.slice.call(arguments, argumentsOffset);
    path = (noPath ? '(.*)' : path);
    debug('use', path, handlers);

    handlers.forEach(function(handler) {
      this.addHandler(path, handler);
    }, this);

  },

  /**
   * isApp
   * @param  {[type]}  handler [description]
   * @return {Boolean}     [description]
   */
  isApp: function(handler) {
    return !!handler.mountpath;
  },

  addHandler: function(path, handler) {
    if (this.isApp(handler)) {
      this.addApp(path, handler);
    } else {
      this.addRoute(path, handler);
    }
  },

  addApp: function(path, app) {
    app.mountpath = this.path() + path;
    app.parent = this;
    debug('add app', app.mountpath, app);
    // this.addRoute(app.mountpath, function(req, res, next) {
    //   debug('mounted app', app.mountpath, app, req, res);
    //   app(req, res, next);
    // });
    // this.use(app.mountpath, function(req, res, next) {
    //   debug('mounted app', app.mountpath, app, req, res);
    //   app(req, res, function(err, req, res) {
    //     if (err) {
    //       next(err);
    //     }
    //   });
    // });
  },

  addRoute: function(path, handler) {
    path = this.path() + path;

    var route = routeFactory(path, handler);
    route.app = this;
    this.ware.use.call(this.ware, route);
  },

  path: function() {
    var path = this.parent ? this.parent.path() + this.mountpath : '';
    return path;
  }
};

function appFactory() {
  var middleware = ware();
  var app = middleware.run.bind(middleware);
  app.ware = middleware;

  //The app.locals object is a JavaScript object, and its properties are local variables within the application.
  app.locals = {};

  //The app.mountpath property is the path pattern(s) on which a sub app was mounted.
  app.mountpath = '/';

  //alias
  app.get = app.use;

  mixin(app, proto, false);
  return app;
}

module.exports = appFactory;
